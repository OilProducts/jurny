## Auto-detect extern/*; if headers missing, FetchContent the dependency.

# glm
if(EXISTS "${CMAKE_SOURCE_DIR}/extern/glm/glm/glm.hpp")
  # extern provided; nothing to fetch
else()
  message(STATUS "[deps] Fetching because missing: ${CMAKE_SOURCE_DIR}/extern/glm/glm/glm.hpp")
  FetchContent_Declare(glm GIT_REPOSITORY https://github.com/g-truc/glm.git GIT_TAG 1.0.1)
  FetchContent_MakeAvailable(glm)
  if(TARGET glm::glm)
    target_link_libraries(ext_glm INTERFACE glm::glm)
  else()
    target_include_directories(ext_glm INTERFACE "${glm_SOURCE_DIR}")
  endif()
endif()

# volk
if(NOT EXISTS "${CMAKE_SOURCE_DIR}/extern/volk/volk.h")
  message(STATUS "[deps] Fetching because missing: ${CMAKE_SOURCE_DIR}/extern/volk/volk.h")
  FetchContent_Declare(volk GIT_REPOSITORY https://github.com/zeux/volk.git GIT_TAG master)
  FetchContent_MakeAvailable(volk)
  if(TARGET volk)
    target_link_libraries(ext_volk INTERFACE volk)
  else()
    target_include_directories(ext_volk INTERFACE "${volk_SOURCE_DIR}")
  endif()
endif()

# spdlog
if(NOT EXISTS "${CMAKE_SOURCE_DIR}/extern/spdlog/include/spdlog/spdlog.h")
  message(STATUS "[deps] Fetching because missing: ${CMAKE_SOURCE_DIR}/extern/spdlog/include/spdlog/spdlog.h")
  FetchContent_Declare(spdlog GIT_REPOSITORY https://github.com/gabime/spdlog.git GIT_TAG v1.12.0)
  FetchContent_MakeAvailable(spdlog)
  if(TARGET spdlog::spdlog_header_only)
    target_link_libraries(ext_spdlog INTERFACE spdlog::spdlog_header_only)
  else()
    target_link_libraries(ext_spdlog INTERFACE spdlog::spdlog)
  endif()
endif()

# tracy
if(NOT EXISTS "${CMAKE_SOURCE_DIR}/extern/tracy/public/tracy/Tracy.hpp")
  message(STATUS "[deps] Fetching because missing: ${CMAKE_SOURCE_DIR}/extern/tracy/public/tracy/Tracy.hpp")
  FetchContent_Declare(tracy GIT_REPOSITORY https://github.com/wolfpld/tracy.git GIT_TAG v0.11.1)
  FetchContent_Populate(tracy)
  if(tracy_POPULATED)
    target_include_directories(ext_tracy INTERFACE "${tracy_SOURCE_DIR}/public")
  endif()
endif()

# stb
if(NOT EXISTS "${CMAKE_SOURCE_DIR}/extern/stb/stb_image.h")
  message(STATUS "[deps] Fetching because missing: ${CMAKE_SOURCE_DIR}/extern/stb/stb_image.h")
  FetchContent_Declare(stb GIT_REPOSITORY https://github.com/nothings/stb.git GIT_TAG master)
  FetchContent_Populate(stb)
  if(stb_POPULATED)
    target_include_directories(ext_stb INTERFACE "${stb_SOURCE_DIR}")
  endif()
endif()

# xxhash
if(NOT EXISTS "${CMAKE_SOURCE_DIR}/extern/xxhash/xxhash.h")
  message(STATUS "[deps] Fetching because missing: ${CMAKE_SOURCE_DIR}/extern/xxhash/xxhash.h")
  FetchContent_Declare(xxhash GIT_REPOSITORY https://github.com/Cyan4973/xxHash.git GIT_TAG v0.8.2)
  FetchContent_Populate(xxhash)
  if(xxhash_POPULATED)
    target_include_directories(ext_xxhash INTERFACE "${xxhash_SOURCE_DIR}")
  endif()
endif()

# VMA
if(NOT EXISTS "${CMAKE_SOURCE_DIR}/extern/VMA/include/vk_mem_alloc.h")
  message(STATUS "[deps] Fetching because missing: ${CMAKE_SOURCE_DIR}/extern/VMA/include/vk_mem_alloc.h")
  FetchContent_Declare(vma GIT_REPOSITORY https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git GIT_TAG v3.1.0)
  FetchContent_Populate(vma)
  if(vma_POPULATED)
    target_include_directories(ext_vma INTERFACE "${vma_SOURCE_DIR}/include" "${vma_SOURCE_DIR}")
  endif()
endif()

# GLFW
if(NOT EXISTS "${CMAKE_SOURCE_DIR}/extern/glfw/include/GLFW/glfw3.h")
  message(STATUS "[deps] Fetching because missing: ${CMAKE_SOURCE_DIR}/extern/glfw/include/GLFW/glfw3.h")
  set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
  set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
  set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
  if(VOXEL_GLFW_WAYLAND)
    find_package(ECM QUIET)
    if(ECM_FOUND)
      set(GLFW_USE_WAYLAND ON CACHE BOOL "" FORCE)
    else()
      message(WARNING "extra-cmake-modules (ECM) not found; falling back to GLFW X11 backend. Install ECM to use Wayland.")
      set(GLFW_USE_WAYLAND OFF CACHE BOOL "" FORCE)
    endif()
  endif()
  FetchContent_Declare(glfw GIT_REPOSITORY https://github.com/glfw/glfw.git GIT_TAG 3.3.8)
  FetchContent_MakeAvailable(glfw)
  if(TARGET glfw)
    target_link_libraries(ext_glfw INTERFACE glfw)
  elseif(TARGET glfw3)
    target_link_libraries(ext_glfw INTERFACE glfw3)
  endif()
endif()
