#version 460

#include "common.glsl"

// Simple HUD overlay: renders ASCII text into the swap image using a baked 6x8 font.

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 26, std430) readonly buffer OverlayBuffer {
  uint header[4];          // [0]=width (chars), [1]=height (chars), [2]=lineStride, [3]=charCount
  uint data[];             // packed ASCII chars (one per uint lower byte)
} Overlay;

layout(set = 0, binding = 27, rgba8) uniform image2D targetImage;

const uint FONT_WIDTH  = 6u;
const uint FONT_HEIGHT = 8u;
const uint CELL_PADDING_X = 1u;
const uint CELL_PADDING_Y = 1u;

// 6x8 bitmap font for printable ASCII 0x20-0x5F. Stored as a flat array of 64 glyphs Ã— 8 rows.
const uint FONT_TABLE[64u * 8u] = uint[](
  0x00u,0x00u,0x00u,0x00u,0x00u,0x00u,0x00u,0x00u,
  0x30u,0x30u,0x30u,0x30u,0x30u,0x00u,0x30u,0x00u,
  0x6cu,0x6cu,0x48u,0x00u,0x00u,0x00u,0x00u,0x00u,
  0x48u,0x48u,0xfcu,0x48u,0xfcu,0x48u,0x48u,0x00u,
  0x10u,0x7cu,0x90u,0x78u,0x12u,0xf4u,0x10u,0x00u,
  0xc4u,0xc8u,0x10u,0x20u,0x46u,0x8cu,0x00u,0x00u,
  0x30u,0x48u,0x30u,0x52u,0x8cu,0x8cu,0x72u,0x00u,
  0x30u,0x30u,0x20u,0x00u,0x00u,0x00u,0x00u,0x00u,
  0x18u,0x30u,0x60u,0x60u,0x60u,0x30u,0x18u,0x00u,
  0x60u,0x30u,0x18u,0x18u,0x18u,0x30u,0x60u,0x00u,
  0x00u,0x48u,0x30u,0xfcu,0x30u,0x48u,0x00u,0x00u,
  0x00u,0x30u,0x30u,0xfcu,0x30u,0x30u,0x00u,0x00u,
  0x00u,0x00u,0x00u,0x00u,0x00u,0x30u,0x30u,0x20u,
  0x00u,0x00u,0x00u,0xfcu,0x00u,0x00u,0x00u,0x00u,
  0x00u,0x00u,0x00u,0x00u,0x00u,0x30u,0x30u,0x00u,
  0x0cu,0x18u,0x30u,0x60u,0xc0u,0x80u,0x00u,0x00u,
  0x78u,0x8cu,0x9cu,0xb4u,0xc4u,0x8cu,0x78u,0x00u,
  0x30u,0x70u,0x30u,0x30u,0x30u,0x30u,0xfcu,0x00u,
  0x78u,0x8cu,0x0cu,0x18u,0x30u,0x60u,0xfcu,0x00u,
  0x78u,0x8cu,0x0cu,0x38u,0x0cu,0x8cu,0x78u,0x00u,
  0x1cu,0x3cu,0x6cu,0xccu,0xfeu,0x0cu,0x1eu,0x00u,
  0xfcu,0x80u,0xf8u,0x0cu,0x0cu,0x8cu,0x78u,0x00u,
  0x38u,0x60u,0xc0u,0xf8u,0xccu,0xccu,0x78u,0x00u,
  0xfcu,0x0cu,0x18u,0x30u,0x30u,0x60u,0x60u,0x00u,
  0x78u,0xccu,0xccu,0x78u,0xccu,0xccu,0x78u,0x00u,
  0x78u,0xccu,0xccu,0x7cu,0x0cu,0x18u,0x70u,0x00u,
  0x00u,0x30u,0x30u,0x00u,0x00u,0x30u,0x30u,0x00u,
  0x00u,0x30u,0x30u,0x00u,0x00u,0x30u,0x30u,0x20u,
  0x0cu,0x18u,0x30u,0x60u,0x30u,0x18u,0x0cu,0x00u,
  0x00u,0x00u,0xfcu,0x00u,0x00u,0xfcu,0x00u,0x00u,
  0x60u,0x30u,0x18u,0x0cu,0x18u,0x30u,0x60u,0x00u,
  0x78u,0xccu,0x0cu,0x18u,0x30u,0x00u,0x30u,0x00u,
  0x78u,0xc4u,0xbcu,0xb4u,0xbcu,0x80u,0x78u,0x00u,
  0x30u,0x78u,0xccu,0xccu,0xfcu,0xccu,0xccu,0x00u,
  0xf8u,0xccu,0xccu,0xf8u,0xccu,0xccu,0xf8u,0x00u,
  0x78u,0xccu,0xc0u,0xc0u,0xc0u,0xccu,0x78u,0x00u,
  0xf0u,0xd8u,0xccu,0xccu,0xccu,0xd8u,0xf0u,0x00u,
  0xfcu,0xc0u,0xc0u,0xf8u,0xc0u,0xc0u,0xfcu,0x00u,
  0xfcu,0xc0u,0xc0u,0xf8u,0xc0u,0xc0u,0xc0u,0x00u,
  0x78u,0xccu,0xc0u,0xdcu,0xccu,0xccu,0x7cu,0x00u,
  0xccu,0xccu,0xccu,0xfcu,0xccu,0xccu,0xccu,0x00u,
  0x78u,0x30u,0x30u,0x30u,0x30u,0x30u,0x78u,0x00u,
  0x1cu,0x0cu,0x0cu,0x0cu,0xccu,0xccu,0x78u,0x00u,
  0xccu,0xd8u,0xf0u,0xe0u,0xf0u,0xd8u,0xccu,0x00u,
  0xc0u,0xc0u,0xc0u,0xc0u,0xc0u,0xc0u,0xfcu,0x00u,
  0x84u,0xccu,0xfcu,0xfcu,0xccu,0xccu,0xccu,0x00u,
  0xccu,0xecu,0xfcu,0xdcu,0xccu,0xccu,0xccu,0x00u,
  0x78u,0xccu,0xccu,0xccu,0xccu,0xccu,0x78u,0x00u,
  0xf8u,0xccu,0xccu,0xf8u,0xc0u,0xc0u,0xc0u,0x00u,
  0x78u,0xccu,0xccu,0xccu,0xdcu,0xd8u,0x70u,0x0cu,
  0xf8u,0xccu,0xccu,0xf8u,0xd8u,0xccu,0xccu,0x00u,
  0x78u,0xccu,0xc0u,0x78u,0x0cu,0xccu,0x78u,0x00u,
  0xfcu,0x30u,0x30u,0x30u,0x30u,0x30u,0x30u,0x00u,
  0xccu,0xccu,0xccu,0xccu,0xccu,0xccu,0x78u,0x00u,
  0xccu,0xccu,0xccu,0xccu,0xccu,0x78u,0x30u,0x00u,
  0xccu,0xccu,0xccu,0xfcu,0xfcu,0xccu,0x84u,0x00u,
  0xccu,0xccu,0x78u,0x30u,0x78u,0xccu,0xccu,0x00u,
  0xccu,0xccu,0xccu,0x78u,0x30u,0x30u,0x30u,0x00u,
  0xfcu,0x0cu,0x18u,0x30u,0x60u,0xc0u,0xfcu,0x00u,
  0x78u,0x60u,0x60u,0x60u,0x60u,0x60u,0x78u,0x00u,
  0xc0u,0x60u,0x30u,0x18u,0x0cu,0x06u,0x00u,0x00u,
  0x78u,0x18u,0x18u,0x18u,0x18u,0x18u,0x78u,0x00u,
  0x10u,0x28u,0x44u,0x00u,0x00u,0x00u,0x00u,0x00u,
  0x00u,0x00u,0x00u,0x00u,0x00u,0x00u,0xfcu,0x00u
);

uint glyphIndex(uint ascii) {
  if (ascii < 0x20u || ascii > 0x5Fu) {
    return 0u;
  }
  return ascii - 0x20u;
}

bool glyphMask(uint ascii, uint x, uint y) {
  uint idx = glyphIndex(ascii);
  if (idx >= 64u || x >= FONT_WIDTH || y >= FONT_HEIGHT) {
    return false;
  }
  uint row = FONT_TABLE[idx * FONT_HEIGHT + y];
  // Font rows are stored left-aligned in the high bits of the byte.
  // Sample bit (7 - x) so all six columns are visible instead of trimming the left edge.
  uint bit = (row >> (7u - x)) & 0x1u;
  return bit != 0u;
}

void main() {
  ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
  ivec2 dims = imageSize(targetImage);
  if (pix.x >= dims.x || pix.y >= dims.y) return;

  uint cellWidth  = FONT_WIDTH + CELL_PADDING_X;
  uint cellHeight = FONT_HEIGHT + CELL_PADDING_Y;

  uint gridWidth  = Overlay.header[0];
  uint gridHeight = Overlay.header[1];
  if (gridWidth == 0u || gridHeight == 0u) {
    return; // nothing to render
  }

  uint rectWidth  = gridWidth * cellWidth;
  uint rectHeight = gridHeight * cellHeight;

  if (uint(pix.x) >= rectWidth || uint(pix.y) >= rectHeight) {
    return;
  }

  uint cellX = uint(pix.x) / cellWidth;
  uint cellY = uint(pix.y) / cellHeight;
  uint localX = uint(pix.x) - cellX * cellWidth;
  uint localY = uint(pix.y) - cellY * cellHeight;

  vec4 dst = imageLoad(targetImage, pix);

  // Background quad
  vec3 bgColor = vec3(0.0, 0.0, 0.0);
  float bgAlpha = 0.55;
  dst.rgb = mix(dst.rgb, bgColor, bgAlpha);

  if (localX < FONT_WIDTH && localY < FONT_HEIGHT) {
    uint stride = Overlay.header[2];
    uint index = cellY * stride + cellX;
    uint charCount = Overlay.header[3];
    uint ascii = 0x20u;
    if (index < charCount) {
      uint raw = Overlay.data[index];
      ascii = raw & 0xFFu;
    }
    if (glyphMask(ascii, localX, localY)) {
      vec3 fg = vec3(0.95, 0.95, 0.95);
      dst.rgb = mix(dst.rgb, fg, 0.85);
    }
  }

  imageStore(targetImage, pix, dst);
}
